apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion//必须
    buildToolsVersion rootProject.ext.buildToolsVersion//必须

    defaultConfig {
        applicationId "com.tdr.familytreasure"

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86", "mips"
        }
    }


    signingConfigs {
        release {
            storeFile file("tendency_android.keystore")
            storePassword "tendency2011,tdr"
            keyAlias "tendency_android.keystore"
            keyPassword "tendency2011,tdr"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildApkByType("release")

        }
        debug {
            buildApkByType("debug")
        }
    }
    lintOptions{
        disable "ResourceType"
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "com.android.support:design:$rootProject.ext.supportVersion"
    compile files('libs/ksoap2-android-assembly-2.5.8-jar-with-dependencies.jar')
    compile files('libs/nineoldandroids-2.4.0.jar')
    compile 'com.daimajia.swipelayout:library:1.2.0@aar'
    compile files('libs/universal-image-loader-1.9.3.jar')
    compile files('libs/ZBarDecoder.jar')
    compile files('libs/core-2.2.jar')
    compile files('libs/AMap_3DMap_V2.4.0.jar')
    compile files('libs/AMap_Services_V2.4.0.jar')
    compile files('libs/Android_Location_V1.3.2.jar')
    compile 'com.orhanobut:logger:1.11'
    compile 'com.flyco.dialog:FlycoDialog_Lib:1.3.2@aar'
    compile files('libs/gson-2.3.1.jar')
    compile project(':libk-ui')
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'org.xutils:xutils:3.3.26'
    compile("com.github.hotchemi:permissionsdispatcher:2.4.0") {
        exclude module: "support-v13"
    }
    annotationProcessor "com.github.hotchemi:permissionsdispatcher-processor:2.4.0"
}

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def buildApkByType(type) {
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.packageApplication.outputFile
            if (outputFile != null && variant.buildType.name == type) {
                def fileName = rootProject.ext.appName + "V${android.defaultConfig.versionName}_${releaseTime()}-" + type + ".apk"
                output.packageApplication.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}

